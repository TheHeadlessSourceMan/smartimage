<?xml version="1.0" ?>
<!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>smartimage</title>
<style type="text/css">
	.filename {font-weight:bold}
	subproject {display:list-item}
	python, .python {display:none}
	h2 {font-size:150%;font-weight:bold;border-bottom:1px solid black;width:100%}
	.expanded:before {color:green;content:'\25BC';font-size:10px;width:21px;cursor:pointer;border:3px outset #99ff99;background:#99ff99}
	description {display:block}
	.childarea {margin-left:7px;padding-left:7px;border-left:3px ridge #99ff99;padding-top:0px}
	h1, name {display:block;font-size:200%;font-weight:bold;border-bottom:2px solid black;width:100%}
	.indent, files {display:block;margin-right:1.5cm;margin-left:1.5cm}
	.shrunken:before {color:green;content:'\25BA';font-size:10px;width:21px;cursor:pointer;border:3px outset #99ff99;background:#99ff99}
	filename {font-weight:bold}
	.all {background:#bbffaa}
	.partial {background:#fff088}
	.none {background:#ffaaaa}
</style>
<script language="JavaScript" type="text/javascript">
function showHide(node,shouldShow) {
	var show=null;
	var twirlie=node.childNodes[0]
	if(twirlie.getAttribute('class')=='expanded'&amp;&amp;(shouldShow==null||shouldShow==0)) {
		show=0;
		twirlie.setAttribute('class','shrunken');
	} else if(twirlie.getAttribute('class')=='shrunken'&amp;&amp;(shouldShow==null||shouldShow==1)) {
		show=1;
		twirlie.setAttribute('class','expanded');
	}
	if(show!=null) {
		var i;
		for(i=2;i&lt;node.childNodes.length;i++) {
			var e=node.childNodes[i];
			if(e.nodeType!=1) {
				// Do nothing. Only interested in elements.
			} else if(show) {
				e.setAttribute('style',e.getAttribute('oldStyle'));
			} else {
				e.setAttribute('oldStyle',e.getAttribute('style'));
				e.setAttribute('style','display:none');
			}
		}
	}
}
</script></head>
<body class="indent">
<name>smartimage</name>
<description>
A format and reference implementation for multilayer images that can be used as templates and rescale smartly to fit different media.
</description>

<h2>Features:</h2>
<div class='indent'>
	<li>Complete vector and raster <a href="https://en.wikipedia.org/wiki/Scene_graph">scene graph</a></li>
	<li>Works great with zipped, or non-zipped resources.</li>
	<li>Automatic heatmap-based rescaling. NICE!</li>
	<li>Solid color layers.</li>
	<li>Image layers.</li>
	<li>Entirely "non-destructive" in that all layers and effects can be altered after-the-fact.</li>
	<li>Modifier layers (not all modifiers finalized/tested).</li>
	<li>Text layers.</li>
	<li>Any file reference can be replaced with #layerId</li>
	<li>I love the way fonts work.  It will try to download missing fonts automagically!</li>
	<li>@id @id._ and @id.attr links working. (Has infinite loop safety mechanism.)</li>
	<li>@templateName values working</li>
	<li>Draft XSD format.</li>
	<li>Blend modes are all working with some semblance of correctness.</li>
	<li>Tags in file are painted bottom-to-top to mimic how we see layers in an editor.</li>
	<li>Draft gui program for viewing images.</li>
</div>

<h2>TODO:</h2>
<div class='indent'>
	<li>need to have layers that extend beyond image for things like rotation</li>
	<li>convert all layers from psd using <a href="https://github.com/kyamagu/psd-tools2">psd-tools</a></li>
	<li>need to translate font friendly names to file names "Viner Hand ITC Regular" -&gt; "VINERITC.TTF"</li>
	<li>may want modifiers to be less generic?</li>
	<li>modifiers should take the form/idiom of <a href="https://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html#filters">SVG filters</a></li>
	<li>gimp/photoshop plugin to read this format?</li>
	<li>dragdrop handler that uses auto-assign variables</li>
	<li><a href="https://www.w3.org/Graphics/SVG/">SVG</a> loading</li>
	</body>
</html>